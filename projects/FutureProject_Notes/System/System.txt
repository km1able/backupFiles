-Object Hierarchy/Systems

_Object (Physical and Virtual Objects)? 
_Poolable (For Concurrent/ASync Processing)
_SerialThread


Threads/ThreadPools/Couroutine(2): Boost / Fibers
    -guarantee thread safety/data security 
    -develop effective model 

    Coroutine: 
        Can be used to 
            Escape and re-enter loops
            Escape and re-enter recursive functions/computations
            Cooperative Multitasking to solve problems in simpler and more elegant way than single
                    flow of control (Boost.org)
        Event-driven model: 
            programming paradigm where flow of a program is determined by event.s tThe events are generated by multiple independent 
            Events are generated by: 
                Multiple independent sources 
                Event-Dispatcher
                        Waits on external sources  
                        Triggers Callback functions (event handlers) 
                                Whenever one of those events is detected (event-loop) 
                Application divided by: 
                    Event Selection (detection) 
                    Event Handling
            Model: Event Source(s) ---> Event Dispatcher (Receive Event/Dispatch Event/Wait/Cycle)
                        ---> Sends to Event Handlers
        
        Benefits:
            Applications are : 
                Highly scalable
                Highly Responsive
                Loosely coupled Components 
            Applications suitable for: 
                User Interface Applications 
                Rule-Based Production Systems  
                ASync I/O (i.e. network servers) 
    
    Boost::Fibers   
        -All work on one thread is guaranteed data-safe 
        -Boost::Fiber allows to MULTIPLEX FIBERS ACROSS MULTIPLE CORES (see numa::work_stealing) 
        




-Say 8 threads
    1 Main thread
    1 Utility thread 
    1 Rendering Thread? 
    4 Threads for ASync Processing of events
        -events from Main threads given to utility thread   
        -utility thread packages work 
        -gives to async pool
        -back to utility for mutex
        -issues Master work back to main threads for Actual events
        -i.e. events found in main thread? 
            -or use ASync for discovery of events
        -i.e. double buffered data -> 
            -one set for data usage
            -when flag is set, swap pointers 
            -give other set to utility/async for processing 
        
Main Thread: Identifies events, input 
    -passes ids, actions to utility 
    -Utility sets lock to either Main Thread or ASync  
    -Should mostly be used for ASync? 
    i.e. 
    Main ---> Locks for Main/Utility
            --Gives to Utility (Utility Locks) --
                    --Messages Processed
                            --Unlocks Main  
                                ==Gives to ASync Pool 


Physical/Virtual Objects: 
    Virtual: for Data Processing   
        --> Say have Controller I/O
            Could have Physical Object with data and State
            Static Virtual for Message Processing   
            Send required portions to Event Handlers
            Return data to Physical Controller

Event Queues: 
    How to define Events? 
    i.e. Enemy Moves, Boss Makes Decision, Player Looks This Way , Item is Picked Up

    For Instance: (Life Cycle of Object: Item) 
        ->Message Sent to Create Item (What prompts, Where, What Kind, What Values?) 
        ->Message Sent if Item is Picked (in World, Create Item.isViewed())
        ->Message Sent if Item is Picked up
            -> Send Message to Destroy Item in World   
            -> Send Message to Create Item in Inventory
        ->Message Sent if Item is used 
            -> What are the effects? Who does it affect? 